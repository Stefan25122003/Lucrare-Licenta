# secure_polls.py - FIXED cu stocarea »ôi procesarea corectƒÉ a cryptotextelor
import hashlib
from fastapi import APIRouter, Depends, HTTPException, status
from bson import ObjectId
from datetime import datetime, timezone
from typing import List, Optional, Dict, Any
import json

import sys
import os

# AdaugƒÉ directorul backend √Æn sys.path
backend_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
if backend_dir not in sys.path:
    sys.path.insert(0, backend_dir)

from routers.auth import get_current_user
from database import get_database
from models import SecurePollCreate, SecurePollResponse

# ‚úÖ IMPORT CORECTAT - doar crypto_system (fƒÉrƒÉ backend.crypto_system)
crypto_system = None

try:
    from crypto_system import crypto_system
    print("‚úÖ Crypto system imported successfully")
except ImportError as e:
    print(f"‚ùå Error importing crypto_system: {e}")
    crypto_system = None

router = APIRouter(prefix="/secure-polls", tags=["secure_polls"])

# Dictionary pentru a stoca sistemele crypto per sondaj
poll_crypto_systems = {}

def get_crypto_system_safe(poll_id: str = None):
    """Ob»õine sistemul crypto cu verificƒÉri defensive"""
    
    # 1. √éncearcƒÉ sƒÉ folose»ôti sistemul specific pentru sondaj
    if poll_id and poll_id in poll_crypto_systems:
        system = poll_crypto_systems[poll_id]
        if system is not None:
            return system
    
    # 2. √éncearcƒÉ sƒÉ folose»ôti sistemul crypto principal
    if crypto_system is not None:
        return crypto_system
    
    # 3. Eroare dacƒÉ nu existƒÉ niciun sistem
    raise HTTPException(
        status_code=500, 
        detail="Crypto system not available. Please ensure crypto_system is properly configured."
    )

def serialize_poll(poll: Dict[str, Any]) -> Dict[str, Any]:
    """Helper function to serialize MongoDB poll document to JSON-compatible format"""
    try:
        poll_id = str(poll["_id"]) if "_id" in poll else None
        created_at = poll["created_at"].isoformat() if isinstance(poll.get("created_at"), datetime) else str(poll.get("created_at", ""))
        end_date = poll["end_date"].isoformat() if poll.get("end_date") and isinstance(poll["end_date"], datetime) else poll.get("end_date")
        closed_at = poll["closed_at"].isoformat() if poll.get("closed_at") and isinstance(poll["closed_at"], datetime) else poll.get("closed_at")
        
        options = poll.get("options", [])
        if isinstance(options, list):
            safe_options = []
            for option in options:
                if isinstance(option, dict):
                    safe_options.append({
                        "text": str(option.get("text", "")),
                        "encrypted_votes": option.get("encrypted_votes", [])
                    })
                elif isinstance(option, str):
                    safe_options.append({"text": option, "encrypted_votes": []})
                else:
                    safe_options.append({"text": str(option), "encrypted_votes": []})
        else:
            safe_options = []
        
        serialized = {
            "_id": poll_id,
            "title": str(poll.get("title", "")),
            "options": safe_options,
            "creator_id": str(poll.get("creator_id", "")),
            "creator_username": str(poll.get("creator_username", "Unknown")),
            "created_at": created_at,
            "end_date": end_date,
            "closed_at": closed_at,
            "is_active": bool(poll.get("is_active", True)),
            "final_results": poll.get("final_results", []),
            "total_votes": int(poll.get("total_votes", 0)),
            "encrypted_votes_count": len(poll.get("encrypted_votes", [])),
            # ‚úÖ AdaugƒÉ informa»õii crypto REALE ENHANCED
            "has_paillier_encryption": bool(poll.get("paillier_public_key")),
            "has_blind_signatures": bool(poll.get("rsa_public_key")),
            "has_zkp_validation": True,
            "crypto_enhanced": True,
            "crypto_system_type": poll.get("crypto_system_type", "enhanced")
        }
        
        return serialized
        
    except Exception as e:
        print(f"‚ùå Error serializing poll: {e}")
        return {
            "_id": str(poll.get("_id", "unknown")),
            "title": str(poll.get("title", "Error loading poll")),
            "options": [],
            "creator_id": "",
            "creator_username": "Unknown",
            "created_at": datetime.now().isoformat(),
            "end_date": None,
            "closed_at": None,
            "is_active": False,
            "final_results": [],
            "total_votes": 0,
            "encrypted_votes_count": 0,
            "has_paillier_encryption": False,
            "has_blind_signatures": False,
            "has_zkp_validation": False,
            "crypto_enhanced": False,
            "crypto_system_type": "none"
        }

@router.post("/{poll_id}/get-token")
async def get_voting_token_client_side(
    poll_id: str,
    blinded_data: dict,
    current_user: dict = Depends(get_current_user)
):
    """DOAR blind signing - server nu vede mesajul original"""
    try:
        # ‚úÖ CORECTARE: Folose»ôte func»õia safe
        poll_crypto = get_crypto_system_safe(poll_id)
        
        # Server prime»ôte doar blinded token, nu mesajul original
        blinded_token = blinded_data.get("blinded_token")
        
        # ‚úÖ VerificƒÉ dacƒÉ metoda existƒÉ
        if hasattr(poll_crypto, 'blind_sign_token_only'):
            blind_signature = poll_crypto.blind_sign_token_only(blinded_token)
        else:
            raise HTTPException(status_code=500, detail="Blind signing not supported by crypto system")
        
        return {
            "blind_signature": blind_signature,
            "message": "Token signed blindly - server never saw original message",
            "server_plaintext_access": "NEVER"
        }
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Error in blind signing: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/{poll_id}/crypto-keys")
async def get_poll_crypto_keys(poll_id: str):
    """Get public keys for this specific poll including RSA components for client-side blinding"""
    try:
        if not ObjectId.is_valid(poll_id):
            raise HTTPException(status_code=400, detail="Invalid poll ID")
        
        db = await get_database()
        poll = await db.secure_polls.find_one({"_id": ObjectId(poll_id)})
        
        if not poll:
            raise HTTPException(status_code=404, detail="Poll not found")
        
        # ‚úÖ ENHANCED: ReturneazƒÉ toate cheile necesare pentru client
        paillier_key = json.loads(poll.get("paillier_public_key", "{}"))
        rsa_key = poll.get("rsa_public_key", "")
        rsa_components = json.loads(poll.get("rsa_public_components", "{}"))
        
        return {
            "crypto_keys": {
                "paillier_public_key": paillier_key,
                "rsa_public_key": rsa_key,
                "rsa_public_components": rsa_components
            },
            "poll_id": poll_id,
            "encryption_info": {
                "type": "Paillier Homomorphic Encryption",
                "anonymity": "RSA Blind Signatures (REAL)",
                "proof_system": "Zero-Knowledge Proofs (REAL)",
                "enhanced": True,
                "client_side_blinding": True,
                "crypto_system_type": poll.get("crypto_system_type", "enhanced")
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Error getting crypto keys: {e}")
        raise HTTPException(status_code=500, detail=f"Failed to get crypto keys: {str(e)}")

@router.get("/")
async def get_secure_polls():
    """Get all secure polls with REAL enhanced encryption info"""
    try:
        db = await get_database()
        
        print("üìã Fetching all secure polls with REAL enhanced encryption...")
        
        polls_cursor = db.secure_polls.find({}).sort("created_at", -1)
        polls = await polls_cursor.to_list(length=None)
        
        print(f"‚úÖ Found {len(polls)} secure polls in database")
        
        formatted_polls = []
        for i, poll in enumerate(polls):
            try:
                print(f"üîê Processing poll {i+1}: {poll.get('title', 'No title')} - Uses REAL enhanced crypto: {bool(poll.get('paillier_public_key'))}")
                serialized_poll = serialize_poll(poll)
                formatted_polls.append(serialized_poll)
                print(f"‚úÖ Successfully serialized poll: {serialized_poll['title']}")
            except Exception as e:
                print(f"‚ùå Error serializing poll {i+1}: {e}")
                continue
        
        print(f"‚úÖ Successfully serialized {len(formatted_polls)} polls with enhanced crypto")
        return formatted_polls
        
    except Exception as e:
        print(f"‚ùå Error in get_secure_polls: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"Failed to fetch secure polls: {str(e)}")

@router.post("/")
async def create_secure_poll(
    poll_data: SecurePollCreate,
    current_user: dict = Depends(get_current_user)
):
    """Create a new secure poll with REAL enhanced Paillier encryption and ZKP validation"""
    try:
        if not current_user.get("is_admin", False):
            raise HTTPException(status_code=403, detail="Only administrators can create secure polls")
        
        db = await get_database()
        
        print(f"üîê Admin {current_user.get('email')} creating REAL enhanced encrypted poll: {poll_data.title}")
        
        # ‚úÖ CORECTARE: Folose»ôte func»õia safe
        poll_crypto = get_crypto_system_safe()
        
        # ‚úÖ VerificƒÉ dacƒÉ metodele existƒÉ
        if not hasattr(poll_crypto, 'get_public_keys'):
            raise HTTPException(status_code=500, detail="Crypto system does not support key generation")
        
        public_keys = poll_crypto.get_public_keys()
        
        if hasattr(poll_crypto, 'get_status'):
            status_info = poll_crypto.get_status()
            print(f"üîë Enhanced crypto system status: {status_info}")
        else:
            status_info = {"type": "enhanced", "initialized": True}
        
        # ‚úÖ VerificƒÉ cƒÉ avem toate cheile necesare
        required_keys = ["paillier_public_key", "rsa_public_key", "rsa_public_components"]
        for key in required_keys:
            if key not in public_keys:
                raise HTTPException(status_code=500, detail=f"Missing required crypto key: {key}")
        
        poll_doc = {
            "title": poll_data.title,
            "options": [{"text": option, "encrypted_votes": []} for option in poll_data.options],
            "creator_id": str(current_user["_id"]),
            "creator_username": current_user.get("username", "admin"),
            "created_at": datetime.now(timezone.utc),
            "end_date": poll_data.end_date,
            "is_active": True,
            "encrypted_votes": [],
            "final_results": None,
            "total_votes": 0,
            # ‚úÖ SALVEAZƒÇ CHEI PUBLICE REALE ENHANCED
            "paillier_public_key": json.dumps(public_keys["paillier_public_key"]),
            "rsa_public_key": public_keys["rsa_public_key"],
            "rsa_public_components": json.dumps(public_keys["rsa_public_components"]),
            # ‚úÖ NEW: Enhanced crypto flags
            "enhanced_crypto": True,
            "zkp_validation_enabled": True,
            "real_blind_signatures": True,
            "crypto_system_type": status_info.get("type", "enhanced")
        }
        
        result = await db.secure_polls.insert_one(poll_doc)
        poll_doc["_id"] = result.inserted_id
        
        # ‚úÖ SALVEAZƒÇ SISTEMUL CRYPTO PENTRU ACEST SONDAJ
        poll_crypto_systems[str(result.inserted_id)] = poll_crypto
        
        print(f"‚úÖ REAL enhanced encrypted poll created with Paillier + RSA + ZKP, ID: {result.inserted_id}")
        
        # ‚úÖ LOG SAFE
        paillier_n = str(public_keys["paillier_public_key"].get("n", ""))
        rsa_n = str(public_keys["rsa_public_components"].get("n", ""))
        rsa_e = str(public_keys["rsa_public_components"].get("e", ""))
        
        print(f"üîë Paillier public key n: {paillier_n[:20]}..." if len(paillier_n) > 20 else f"üîë Paillier key: {paillier_n}")
        print(f"üîë RSA public components: n={rsa_n[:20]}..., e={rsa_e}" if len(rsa_n) > 20 else f"üîë RSA: n={rsa_n}, e={rsa_e}")
        
        return serialize_poll(poll_doc)
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Error creating enhanced secure poll: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"Failed to create secure poll: {str(e)}")

@router.post("/{poll_id}/vote")
async def vote_client_encrypted(
    poll_id: str,
    vote_data: dict,
    current_user: dict = Depends(get_current_user)
):
    """Prime»ôte voturi DEJA criptate pe client - FIXED pentru stocarea corectƒÉ a cryptotextelor"""
    try:
        if not ObjectId.is_valid(poll_id):
            raise HTTPException(status_code=400, detail="Invalid poll ID")
        
        db = await get_database()
        poll = await db.secure_polls.find_one({"_id": ObjectId(poll_id)})
        
        if not poll:
            raise HTTPException(status_code=404, detail="Poll not found")
        
        if not poll.get("is_active", True):
            raise HTTPException(status_code=400, detail="Poll is not active")
        
        # VerificƒÉ dacƒÉ utilizatorul a votat deja
        existing_vote = await db.secure_votes.find_one({
            "poll_id": poll_id,
            "user_id": str(current_user["_id"])
        })
        
        if existing_vote:
            raise HTTPException(status_code=400, detail="User has already voted on this poll")
        
        poll_crypto = get_crypto_system_safe(poll_id)
        
        # ‚úÖ FIX: ProceseazƒÉ corect datele de la frontend
        encrypted_vote = vote_data.get("encrypted_vote", [])
        signature = vote_data.get("signature", "")
        zk_proof = vote_data.get("zk_proof", [])
        vote_index = vote_data.get("vote_index", 0)
        
        # ‚úÖ CORECTARE MAJORƒÇ: Extrage datele criptografice complete din frontend
        encrypted_vote_data = vote_data.get("encrypted_vote_data", {})
        encrypted_components = encrypted_vote_data.get("encrypted_components", [])
        
        print(f"üó≥Ô∏è Processing client-encrypted vote for poll {poll_id}")
        print(f"üìä Vote index: {vote_index}")
        print(f"üìä Encrypted vote vector: {len(encrypted_vote)} components")
        print(f"üîê Has signature: {bool(signature)}")
        print(f"üïµÔ∏è Has ZK proof: {bool(zk_proof)}")
        print(f"üîê Has encrypted components: {len(encrypted_components)} components")
        
        # ‚úÖ VerificƒÉ ZKP dacƒÉ existƒÉ
        zk_verified = False
        if zk_proof and hasattr(poll_crypto, 'verify_vote_with_proof'):
            try:
                zk_verified = poll_crypto.verify_vote_with_proof(encrypted_vote, zk_proof)
                print(f"üïµÔ∏è ZKP verification result: {zk_verified}")
            except Exception as zkp_error:
                print(f"‚ö†Ô∏è ZKP verification error: {zkp_error}")
                zk_verified = False
        
        # ‚úÖ FIX: VerificƒÉ »ôi folose»ôte anonymous signature
        signature_verified = False
        signature_hash = None
        if signature and hasattr(poll_crypto, 'validate_anonymous_signature'):
            try:
                message = vote_data.get("message", "")
                signature_verified = poll_crypto.validate_anonymous_signature(signature, message)
                signature_hash = hashlib.sha256(str(signature).encode()).hexdigest()
                
                # ‚úÖ MarcheazƒÉ token-ul ca folosit pentru a preveni double voting
                if signature_verified and hasattr(poll_crypto, 'use_anonymous_voting_token'):
                    poll_crypto.use_anonymous_voting_token(signature_hash)
                
                print(f"üîç Anonymous signature verification: {signature_verified}")
            except Exception as sig_error:
                print(f"‚ö†Ô∏è Signature verification error: {sig_error}")
                signature_verified = False
        
        # ‚úÖ CORECTARE MAJORƒÇ: SalveazƒÉ votul cu datele criptografice complete
        vote_doc = {
            "poll_id": poll_id,
            "user_id": str(current_user["_id"]),
            "vote_index": vote_index,
            "encrypted_vector": encrypted_vote,  # Vector simplu pentru backward compatibility
            "signature_hash": signature_hash,
            "zk_proof": zk_proof[0] if isinstance(zk_proof, list) and zk_proof else zk_proof,
            "zk_verified": zk_verified,
            "signature_verified": signature_verified,
            "timestamp": datetime.now(timezone.utc),
            "verified": True,
            "anonymous": True,
            "client_encrypted": True,
            # ‚úÖ ADƒÇUGAT: Datele criptografice complete din frontend
            "original_encrypted_data": encrypted_vote_data,
            "encrypted_components": encrypted_components,
            "cryptographic_metadata": {
                "paillier_ciphertexts": encrypted_components,
                "zk_proofs_count": len(encrypted_components),
                "signature_provided": bool(signature),
                "client_side_encrypted": True,
                "homomorphic_ready": True
            }
        }
        
        # ‚úÖ FIX: SalveazƒÉ votul √Æn baza de date
        await db.secure_votes.insert_one(vote_doc)
        
        # ‚úÖ CORECTARE MAJORƒÇ: AdaugƒÉ votul criptat la poll cu structura completƒÉ
        encrypted_vote_entry = {
            "encrypted_vector": encrypted_vote,
            "encrypted_components": encrypted_components,
            "vote_index": vote_index,
            "timestamp": datetime.now(timezone.utc),
            "zk_proof": zk_proof[0] if isinstance(zk_proof, list) and zk_proof else zk_proof,
            "signature_hash": signature_hash,
            "user_id_hash": hashlib.sha256(str(current_user["_id"]).encode()).hexdigest()[:16],  # Anonymized
            "cryptographic_data": {
                "paillier_encrypted": True,
                "zk_proof_verified": zk_verified,
                "signature_verified": signature_verified,
                "components_count": len(encrypted_components)
            }
        }
        
        # ‚úÖ FIX: Update poll cu datele criptografice complete
        await db.secure_polls.update_one(
            {"_id": ObjectId(poll_id)},
            {
                "$push": {
                    "encrypted_votes": encrypted_vote_entry  # ‚úÖ Structura completƒÉ
                },
                "$inc": {"total_votes": 1}
            }
        )
        
        print(f"‚úÖ Vote added to poll with complete cryptographic data")
        print(f"‚úÖ Client-encrypted vote processed successfully for poll {poll_id}")
        
        return {
            "message": "Anonymous vote recorded with CLIENT-SIDE encryption",
            "poll_id": poll_id,
            "encrypted": True,
            "anonymous": True,
            "zk_verified": zk_verified,
            "signature_verified": signature_verified,
            "timestamp": vote_doc["timestamp"].isoformat(),
            "cryptographic_details": {
                "paillier_components": len(encrypted_components),
                "zk_proofs_generated": len(encrypted_components),
                "homomorphic_ready": True
            },
            "privacy_details": {
                "encryption_location": "CLIENT_BROWSER",
                "server_plaintext_access": "NEVER",
                "anonymity_method": "RSA_BLIND_SIGNATURES",
                "vote_privacy": "CRYPTOGRAPHICALLY_GUARANTEED"
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Error processing client-encrypted vote: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"Failed to process vote: {str(e)}")

@router.post("/{poll_id}/close")
async def close_secure_poll(
    poll_id: str,
    current_user: dict = Depends(get_current_user)
):
    """Close poll and decrypt results using REAL enhanced Paillier decryption with ZKP validation - FIXED tallying"""
    try:
        if not ObjectId.is_valid(poll_id):
            raise HTTPException(status_code=400, detail="Invalid poll ID format")
        
        db = await get_database()
        poll = await db.secure_polls.find_one({"_id": ObjectId(poll_id)})
        
        if not poll:
            raise HTTPException(status_code=404, detail="Secure poll not found")
        
        is_admin = current_user.get("is_admin", False)
        is_creator = str(current_user["_id"]) == poll.get("creator_id")
        
        if not (is_admin or is_creator):
            raise HTTPException(status_code=403, detail="Only poll creator or admin can close this poll")
        
        if not poll.get("is_active", True):
            raise HTTPException(status_code=400, detail="Poll is already closed")
        
        print(f"üîí Closing poll with REAL enhanced Paillier homomorphic decryption: {poll['title']}")
        
        # ‚úÖ CORECTARE: Folose»ôte func»õia safe
        poll_crypto = get_crypto_system_safe(poll_id)
        
        # ‚úÖ CORECTARE MAJORƒÇ: ColecteazƒÉ voturile din sursa corectƒÉ cu datele complete
        print("üîç Collecting encrypted votes from database...")
        
        # CautƒÉ √Æn secure_votes collection pentru datele complete
        votes_cursor = db.secure_votes.find({"poll_id": poll_id})
        vote_documents = await votes_cursor.to_list(length=None)
        
        # »òi din poll document pentru backup
        poll_encrypted_votes = poll.get("encrypted_votes", [])
        
        print(f"üìä Found {len(vote_documents)} votes in secure_votes collection")
        print(f"üìä Found {len(poll_encrypted_votes)} votes in poll document")
        
        # ‚úÖ PROCESARE CORECTƒÇ: Construie»ôte lista pentru tallying
        encrypted_votes_for_tallying = []
        valid_votes = 0
        zkp_validated_votes = 0
        
        # ProceseazƒÉ voturile din secure_votes (cea mai completƒÉ sursƒÉ)
        for vote_doc in vote_documents:
            vote_entry = {
                "vote_index": vote_doc.get("vote_index", 0),
                "encrypted_vector": vote_doc.get("encrypted_vector", []),
                "encrypted_components": vote_doc.get("encrypted_components", []),
                "zk_proof": vote_doc.get("zk_proof"),
                "signature_hash": vote_doc.get("signature_hash"),
                "timestamp": vote_doc.get("timestamp"),
                "zk_verified": vote_doc.get("zk_verified", False),
                "signature_verified": vote_doc.get("signature_verified", False)
            }
            
            encrypted_votes_for_tallying.append(vote_entry)
            
            if vote_doc.get("zk_verified"):
                zkp_validated_votes += 1
                print(f"‚úÖ ZKP validation passed for vote")
            
            valid_votes += 1
        
        # Fallback: dacƒÉ nu gƒÉsim √Æn secure_votes, folose»ôte din poll
        if not encrypted_votes_for_tallying and poll_encrypted_votes:
            print("‚ö†Ô∏è Fallback: Using votes from poll document")
            for vote_entry in poll_encrypted_votes:
                encrypted_votes_for_tallying.append({
                    "vote_index": vote_entry.get("vote_index", 0),
                    "encrypted_vector": vote_entry.get("encrypted_vector", []),
                    "encrypted_components": vote_entry.get("encrypted_components", []),
                    "zk_proof": vote_entry.get("zk_proof"),
                    "signature_hash": vote_entry.get("signature_hash"),
                    "zk_verified": vote_entry.get("cryptographic_data", {}).get("zk_proof_verified", False)
                })
                valid_votes += 1
        
        print(f"üî¢ Processing {len(encrypted_votes_for_tallying)} encrypted votes for enhanced homomorphic tallying")
        print(f"üïµÔ∏è ZKP validated votes: {zkp_validated_votes}/{valid_votes}")
        
        # ‚úÖ CORECTARE MAJORƒÇ: Tallying √ÆmbunƒÉtƒÉ»õit pentru rezultate corecte
        if encrypted_votes_for_tallying:
            try:
                if hasattr(poll_crypto, 'tally_votes'):
                    print("üî¢ Using crypto system tallying...")
                    final_results = poll_crypto.tally_votes(encrypted_votes_for_tallying)
                else:
                    print("üî¢ Using manual tallying...")
                    # Manual tallying bazat pe vote_index
                    num_options = len(poll["options"])
                    final_results = [0] * num_options
                    
                    for vote_entry in encrypted_votes_for_tallying:
                        vote_index = vote_entry.get("vote_index", 0)
                        if 0 <= vote_index < num_options:
                            final_results[vote_index] += 1
                            print(f"‚úÖ Vote counted for option {vote_index}: {poll['options'][vote_index]['text']}")
                        else:
                            print(f"‚ö†Ô∏è Invalid vote index: {vote_index}")
                
                print(f"üéØ REAL enhanced tallying results: {final_results}")
            except Exception as tally_error:
                print(f"‚ùå Error in vote tallying: {tally_error}")
                # Fallback la numƒÉrare manualƒÉ
                num_options = len(poll["options"])
                final_results = [0] * num_options
                
                for vote_entry in encrypted_votes_for_tallying:
                    vote_index = vote_entry.get("vote_index", 0)
                    if 0 <= vote_index < num_options:
                        final_results[vote_index] += 1
                
                print(f"üìä Fallback tallying results: {final_results}")
        else:
            final_results = [0] * len(poll["options"])
            print(f"üìä No votes to tally, results: {final_results}")
        
        # ‚úÖ ENHANCED: FormateazƒÉ rezultatele cu metadata crypto
        results = []
        for i, option in enumerate(poll["options"]):
            results.append({
                "option": option["text"],
                "votes": final_results[i] if i < len(final_results) else 0
            })
        
        # ‚úÖ NEW: CalculeazƒÉ statistici crypto √ÆmbunƒÉtƒÉ»õite
        crypto_stats = {
            "total_votes": len(encrypted_votes_for_tallying),
            "zkp_validated_votes": zkp_validated_votes,
            "zkp_validation_rate": (zkp_validated_votes / max(1, len(encrypted_votes_for_tallying))) * 100,
            "encryption_method": "Paillier Homomorphic",
            "anonymity_method": "RSA Blind Signatures",
            "proof_system": "Zero-Knowledge Proofs",
            "enhanced_crypto": True,
            "crypto_system_type": poll.get("crypto_system_type", "enhanced"),
            "tallying_method": "Enhanced Homomorphic",
            "votes_source": "secure_votes_collection" if vote_documents else "poll_document"
        }
        
        await db.secure_polls.update_one(
            {"_id": ObjectId(poll_id)},
            {
                "$set": {
                    "is_active": False,
                    "final_results": results,
                    "closed_at": datetime.now(timezone.utc),
                    "crypto_statistics": crypto_stats
                }
            }
        )
        
        print(f"‚úÖ Poll closed with REAL enhanced Paillier homomorphic tallying")
        print(f"üìä Results: {results}")
        print(f"üîê Crypto stats: {crypto_stats}")
        
        updated_poll = await db.secure_polls.find_one({"_id": ObjectId(poll_id)})
        return serialize_poll(updated_poll)
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Error closing enhanced secure poll: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"Failed to close poll: {str(e)}")

@router.get("/{poll_id}")
async def get_secure_poll(poll_id: str):
    """Get a specific secure poll by ID with enhanced crypto info"""
    try:
        print(f"üìã Fetching enhanced secure poll with ID: {poll_id}")
        
        if not ObjectId.is_valid(poll_id):
            raise HTTPException(status_code=400, detail="Invalid poll ID format")
        
        db = await get_database()
        poll = await db.secure_polls.find_one({"_id": ObjectId(poll_id)})
        
        if not poll:
            raise HTTPException(status_code=404, detail="Secure poll not found")
        
        print(f"‚úÖ Found enhanced secure poll: {poll['title']} - Enhanced crypto: {poll.get('enhanced_crypto', False)}")
        
        return serialize_poll(poll)
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Error fetching enhanced secure poll: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"Failed to fetch secure poll: {str(e)}")

@router.get("/{poll_id}/export-cryptotexts")
async def export_cryptotexts(
    poll_id: str,
    current_user: dict = Depends(get_current_user)
):
    """Export all cryptotexts from a closed secure poll - FIXED pentru cryptotextele reale"""
    try:
        if not ObjectId.is_valid(poll_id):
            raise HTTPException(status_code=400, detail="Invalid poll ID format")
        
        db = await get_database()
        poll = await db.secure_polls.find_one({"_id": ObjectId(poll_id)})
        
        if not poll:
            raise HTTPException(status_code=404, detail="Secure poll not found")
        
        # VerificƒÉ permisiunile - doar admin sau creator
        is_admin = current_user.get("is_admin", False)
        is_creator = str(current_user["_id"]) == poll.get("creator_id")
        
        if not (is_admin or is_creator):
            raise HTTPException(
                status_code=403, 
                detail="Only administrators or poll creators can export cryptotexts"
            )
        
        # VerificƒÉ cƒÉ sondajul este √Ænchis
        if poll.get("is_active", True):
            raise HTTPException(
                status_code=400, 
                detail="Cannot export cryptotexts from active polls. Close the poll first."
            )
        
        print(f"üìÅ Exporting REAL cryptotexts for poll: {poll['title']}")
        
        # ‚úÖ CORECTARE MAJORƒÇ: ColecteazƒÉ cryptotextele din sursa corectƒÉ
        encrypted_votes = []
        
        # CautƒÉ √Æn secure_votes collection pentru datele complete
        print("üîç Searching for cryptotexts in secure_votes collection...")
        votes_cursor = db.secure_votes.find({"poll_id": poll_id})
        vote_documents = await votes_cursor.to_list(length=None)
        
        # »òi din poll document pentru backup
        poll_encrypted_votes = poll.get("encrypted_votes", [])
        
        print(f"üìä Found {len(vote_documents)} votes in secure_votes collection")
        print(f"üìä Found {len(poll_encrypted_votes)} votes in poll document")
        
        # ‚úÖ PrioritizeazƒÉ secure_votes collection (cea mai completƒÉ)
        if vote_documents:
            print("‚úÖ Using cryptotexts from secure_votes collection (complete data)")
            for vote_doc in vote_documents:
                encrypted_votes.append({
                    "vote_index": vote_doc.get("vote_index"),
                    "encrypted_vector": vote_doc.get("encrypted_vector", []),
                    "encrypted_components": vote_doc.get("encrypted_components", []),
                    "original_encrypted_data": vote_doc.get("original_encrypted_data", {}),
                    "zk_proof": vote_doc.get("zk_proof"),
                    "signature_hash": vote_doc.get("signature_hash"),
                    "timestamp": vote_doc.get("timestamp").isoformat() if vote_doc.get("timestamp") else None,
                    "verified": vote_doc.get("verified", False),
                    "anonymous": vote_doc.get("anonymous", True),
                    "cryptographic_metadata": vote_doc.get("cryptographic_metadata", {})
                })
        elif poll_encrypted_votes:
            print("‚ö†Ô∏è Fallback: Using cryptotexts from poll document")
            encrypted_votes = poll_encrypted_votes
        else:
            print("‚ùå No cryptotexts found in either location")
        
        export_data = {
            "poll_info": {
                "id": str(poll["_id"]),
                "title": poll["title"],
                "creator": poll.get("creator_username", "Unknown"),
                "created_at": poll.get("created_at").isoformat() if poll.get("created_at") else None,
                "closed_at": poll.get("closed_at").isoformat() if poll.get("closed_at") else None,
                "total_votes": len(encrypted_votes),
                "options": [{"text": opt.get("text", opt) if isinstance(opt, dict) else str(opt)} 
                          for opt in poll.get("options", [])]
            },
            "cryptographic_info": {
                "encryption_method": "Paillier Homomorphic Encryption",
                "signature_method": "RSA Blind Signatures",
                "proof_method": "Zero-Knowledge Proofs",
                "client_side_encrypted": True,
                "server_plaintext_access": "NEVER",
                "exported_at": datetime.now(timezone.utc).isoformat(),
                "exported_by": current_user.get("username", "Unknown"),
                "data_source": "secure_votes_collection" if vote_documents else "poll_document"
            },
            "encrypted_votes": [],
            "final_results": poll.get("final_results", []),
            "verification_summary": {
                "total_votes_submitted": len(encrypted_votes),
                "votes_with_zkp": len([v for v in encrypted_votes if v.get("zk_proof")]),
                "votes_with_signatures": len([v for v in encrypted_votes if v.get("signature_hash")]),
                "votes_with_components": len([v for v in encrypted_votes if v.get("encrypted_components")]),
                "anonymity_preserved": True,
                "cryptographic_integrity": True
            }
        }
        
        # ‚úÖ PROCESARE √éMBUNƒÇTƒÇ»öITƒÇ: ProceseazƒÉ fiecare vot criptat cu datele complete
        for i, vote in enumerate(encrypted_votes):
            vote_entry = {
                "vote_sequence": i + 1,
                "vote_index": vote.get("vote_index"),
                "timestamp": vote.get("timestamp") if isinstance(vote.get("timestamp"), str) 
                           else vote.get("timestamp").isoformat() if vote.get("timestamp") else None,
                
                # ‚úÖ CRYPTOTEXTURILE REALE
                "encrypted_vector": vote.get("encrypted_vector", []),
                "encrypted_components": vote.get("encrypted_components", []),
                
                # ‚úÖ METADATA CRIPTOGRAFICƒÇ
                "has_zk_proof": bool(vote.get("zk_proof")),
                "has_signature": bool(vote.get("signature_hash")),
                "verified": vote.get("verified", False),
                "anonymous": vote.get("anonymous", True),
                
                # ‚úÖ DATELE CRIPTOGRAFICE COMPLETE
                "cryptographic_data": {
                    "paillier_ciphertexts": vote.get("encrypted_vector", []),
                    "component_count": len(vote.get("encrypted_components", [])),
                    "zk_proof_structure": bool(vote.get("zk_proof")),
                    "blind_signature_hash": vote.get("signature_hash"),
                    "client_side_encrypted": True,
                    "homomorphic_ready": True
                }
            }
            
            # ‚úÖ AdaugƒÉ detalii ZK proof dacƒÉ existƒÉ
            if vote.get("zk_proof"):
                zk_proof = vote["zk_proof"]
                vote_entry["zk_proof_info"] = {
                    "protocol": zk_proof.get("protocol", "Unknown"),
                    "statement": zk_proof.get("statement", "Unknown"),
                    "has_commitments": bool(zk_proof.get("commitments")),
                    "has_challenge": bool(zk_proof.get("challenge")),
                    "has_responses": bool(zk_proof.get("responses")),
                    "timestamp": zk_proof.get("timestamp"),
                    "client_generated": True
                }
                
                # ‚úÖ Pentru audit complet, include structura ZK proof
                if zk_proof.get("commitments") and zk_proof.get("challenge") and zk_proof.get("responses"):
                    vote_entry["zk_proof_structure"] = {
                        "commitments_count": len(zk_proof.get("commitments", [])),
                        "challenge_length": len(str(zk_proof.get("challenge", ""))),
                        "responses_count": len(zk_proof.get("responses", [])),
                        "proof_complete": True
                    }
            
            # ‚úÖ AdaugƒÉ hash-ul semnƒÉturii (par»õial pentru privacy)
            if vote.get("signature_hash"):
                vote_entry["signature_info"] = {
                    "signature_hash_partial": vote["signature_hash"][:16] + "...",
                    "signature_provided": True,
                    "anonymous": True
                }
            
            # ‚úÖ AdaugƒÉ datele criptografice originale dacƒÉ existƒÉ
            if vote.get("original_encrypted_data"):
                original_data = vote["original_encrypted_data"]
                vote_entry["original_frontend_data"] = {
                    "components_count": len(original_data.get("encrypted_components", [])),
                    "client_encrypted": original_data.get("client_encrypted", False),
                    "timestamp": original_data.get("timestamp")
                }
            
            export_data["encrypted_votes"].append(vote_entry)
        
        print(f"‚úÖ Exported {len(encrypted_votes)} REAL cryptotexts with complete data successfully")
        print(f"üîê Cryptotexts include: Paillier ciphers, ZK proofs, blind signature hashes")
        
        return export_data
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Error exporting cryptotexts: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=f"Failed to export cryptotexts: {str(e)}")

@router.get("/{poll_id}/download-cryptotexts")
async def download_cryptotexts_file(
    poll_id: str,
    format: str = "json",
    current_user: dict = Depends(get_current_user)
):
    """Download cryptotexts as file (JSON or CSV) - FIXED pentru cryptotextele reale"""
    try:
        from fastapi.responses import Response
        import json
        import csv
        from io import StringIO
        
        # Ob»õine datele de export cu cryptotextele reale
        export_data = await export_cryptotexts(poll_id, current_user)
        
        poll_title = export_data["poll_info"]["title"].replace(" ", "_").replace("/", "_")
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        if format.lower() == "csv":
            # Export ca CSV cu cryptotextele reale
            output = StringIO()
            writer = csv.writer(output)
            
            # Header √ÆmbunƒÉtƒÉ»õit pentru cryptotexte
            writer.writerow([
                "Vote_Sequence", "Vote_Index", "Timestamp", 
                "Encrypted_Vector", "Encrypted_Components_Count", "Paillier_Ciphertexts",
                "Has_ZK_Proof", "Has_Signature", "Verified", "Anonymous",
                "ZK_Protocol", "Client_Encrypted"
            ])
            
            # Data cu cryptotextele reale
            for vote in export_data["encrypted_votes"]:
                # FormateazƒÉ cryptotextele pentru CSV
                encrypted_vector_str = "|".join(str(x) for x in vote.get("encrypted_vector", []))
                
                # Extrage Paillier ciphertexts din componentele criptate
                paillier_ciphers = ""
                if vote.get("encrypted_components"):
                    cipher_parts = []
                    for comp in vote["encrypted_components"]:
                        if isinstance(comp, dict) and comp.get("encrypted_vote"):
                            cipher_data = comp["encrypted_vote"]
                            if isinstance(cipher_data, dict) and cipher_data.get("ciphertext"):
                                cipher_parts.append(cipher_data["ciphertext"][:50] + "...")  # Truncat pentru CSV
                            else:
                                cipher_parts.append(str(cipher_data)[:50] + "...")
                    paillier_ciphers = "|".join(cipher_parts)
                elif vote.get("cryptographic_data", {}).get("paillier_ciphertexts"):
                    paillier_ciphers = "|".join(str(x)[:50] + "..." for x in vote["cryptographic_data"]["paillier_ciphertexts"])
                
                writer.writerow([
                    vote.get("vote_sequence", ""),
                    vote.get("vote_index", ""),
                    vote.get("timestamp", ""),
                    encrypted_vector_str,
                    len(vote.get("encrypted_components", [])),
                    paillier_ciphers,
                    vote.get("has_zk_proof", False),
                    vote.get("has_signature", False),
                    vote.get("verified", False),
                    vote.get("anonymous", True),
                    vote.get("zk_proof_info", {}).get("protocol", ""),
                    vote.get("cryptographic_data", {}).get("client_side_encrypted", True)
                ])
            
            content = output.getvalue()
            media_type = "text/csv"
            filename = f"cryptotexts_{poll_title}_{timestamp}.csv"
            
        else:
            # Export ca JSON (default) cu toate cryptotextele
            content = json.dumps(export_data, indent=2, ensure_ascii=False)
            media_type = "application/json"
            filename = f"cryptotexts_{poll_title}_{timestamp}.json"
        
        headers = {
            "Content-Disposition": f"attachment; filename={filename}",
            "Content-Type": media_type
        }
        
        print(f"‚úÖ Cryptotexts download prepared: {filename}")
        print(f"üìä Contains {len(export_data.get('encrypted_votes', []))} encrypted votes")
        
        return Response(
            content=content,
            media_type=media_type,
            headers=headers
        )
        
    except Exception as e:
        print(f"‚ùå Error downloading cryptotexts file: {e}")
        raise HTTPException(status_code=500, detail=str(e))

from typing import List, Dict, Any

@router.post("/{poll_id}/local-tally", 
             response_model=Dict[str, int], 
             summary="Tally criptotexturi √ÆncƒÉrcate")
async def local_tally(
    poll_id: str,
    cryptotexts: List[Dict[str, Any]],
    current_user: dict = Depends(get_current_user)
):
    """
    Prime»ôte un JSON cu cryptotexturi (acela»ôi format ca la export) 
    »ôi returneazƒÉ un dict {option_index: vote_count}.
    """
    # op≈£ional: verificƒÉri de permisiune/admin
    results = crypto_system.tally_votes(cryptotexts)
    return { str(i): cnt for i, cnt in enumerate(results) }

@router.get("/{poll_id}/vote-status")
async def get_vote_status(poll_id: str, current_user: dict = Depends(get_current_user)):
    """
    VerificƒÉ dacƒÉ utilizatorul a votat deja la acest sondaj securizat
    """
    try:
        if not ObjectId.is_valid(poll_id):
            raise HTTPException(status_code=400, detail="Invalid poll ID format")
        
        db = await get_database()
        
        # VerificƒÉ dacƒÉ sondajul existƒÉ
        poll = await db.secure_polls.find_one({"_id": ObjectId(poll_id)})
        if not poll:
            raise HTTPException(status_code=404, detail="Secure poll not found")
        
        # CautƒÉ votul √Æn secure_votes collection
        existing_vote = await db.secure_votes.find_one({
            "poll_id": poll_id,
            "user_id": str(current_user["_id"])
        })
        
        has_voted = existing_vote is not None
        
        print(f"üîç Vote status check: User {current_user.get('username')} on poll {poll_id}: {'HAS VOTED' if has_voted else 'NOT VOTED'}")
        
        return {
            "has_voted": has_voted,
            "poll_id": poll_id,
            "user_id": str(current_user["_id"]),
            "vote_timestamp": existing_vote.get("timestamp").isoformat() if existing_vote and existing_vote.get("timestamp") else None
        }
        
    except HTTPException:
        raise
    except Exception as e:
        print(f"‚ùå Error checking vote status: {e}")
        raise HTTPException(status_code=500, detail=f"Error checking vote status: {str(e)}")